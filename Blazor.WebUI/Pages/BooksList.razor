@page "/books-list"
@using Blazor.Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>List of Books</PageTitle>

<h1>List of Books</h1>

<NavLink class="nav-link" href="add-book">
    <span class="oi oi-plus" aria-hidden="true"></span> ADD BOOK
</NavLink>

<div class="form-group">
    <input class="form-control" type="text" placeholder="Filter..."
           @bind="Filter"
           @bind:event="oninput">
</div>

    <table class="table">
        <thead>
            <tr>
                <th>Book ID</th>
                <th>Book Reference No.</th>
                <th>Book Name</th>
                <th>Theme</th>
                <th>Book Status</th>
                <th>Active?</th>
                <th>Date Created</th>
                <th>Date Last Updated</th>
                <th>Delete</th>
                <th>Update</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in booksLists)
            {
            if (!IsVisible(book))
            continue;
                <tr>
                    <td>@book.BookId</td>
                    <td>@book.BookReferenceNo</td>
                    <td>@book.BookName</td>
                    <td>@book.Theme</td>
                    <td>@book.BookStatus</td>
                    <td>@book.isActive</td>
                    <td>@book.DateCreated</td>
                    <td>@book.DateLastUpdate</td>
                    <td><button type="button" @onclick="(async ()=> await DeleteBook(book.BookId))" class="btn btn-danger">Delete</button></td>
                <td><button type="button" @onclick="(async ()=> await UpdateBook(book.BookId))" class="btn btn-warning">Update</button></td>
                </tr>
            }
        </tbody>
    </table>


@code {


    protected List<Book> booksLists = new();
    public string Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetBooksList();
    }

    [AllowAnonymous]
    protected async Task GetBooksList()
    {
        string apiUrl = "https://localhost:7239/api/books/get-books";
        var response = await Http.GetAsync(apiUrl);
        response.EnsureSuccessStatusCode();
        string responseBodyJson = await response.Content.ReadAsStringAsync();

        booksLists = JsonConvert.DeserializeObject<List<Book>>(responseBodyJson);
    }

    protected async Task DeleteBook(int? bookId)
    {
        string apiUrl = "https://localhost:7239/api/books/delete-book/" + bookId;

        //if (bookId <= 0)
        //{
        //    return;
        //}

        await Http.DeleteAsync(apiUrl);
        NavigationManager.NavigateTo("/");
    }

    protected async Task UpdateBook(int? bookId)
    {
        string pageUrl = "/update-book/" + bookId;


        //await Http.PostAsJsonAsync(apiUrl, bookId);
        NavigationManager.NavigateTo(pageUrl);
    }

    public bool IsVisible(Book book)
    {
            if (string.IsNullOrEmpty(Filter))
        return true;
 
    if (book.BookName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
        return true;
 
    if (book.BookReferenceNo.Contains(Filter, StringComparison.OrdinalIgnoreCase))
        return true;
 
    return false;
    }

 
}
